/* index.css
// ---------
// Copyright Â©2022 Jeremy Kelly
// www.anthemion.org */

@import "~sanitize.css";
@import "~sanitize.css/typography.css";
@import "~sanitize.css/forms.css";

:root {
	--FontFamilySerif: "Brygada 1918", serif;
	--FontFamilySans: "Open Sans", sans-serif;

	/* Color styles
	// ------------ */

	--ColorViewBack: hsl(30, 20%, 93%);
	--ColorViewBackAlt: hsl(30, 10%, 86%);

	--ColorDlgBack: hsl(0, 0%, 90%);

	--ColorText: black;
	--ColorTextAlt1: hsl(0, 60%, 50%);
	--ColorTextAlt2: hsl(30, 60%, 50%);

	--ColorLink: initial;
	--ColorLinkVisit: initial;

	--ColorRule: black;

	--ColorBtnBack: white;
	--ColorBtnBackDisab: hsl(0, 0%, 85%);
	--ColorBtnBackHov: hsl(0, 0%, 95%);
	--ColorBtnBackAct: hsl(0, 0%, 85%);
	--StyBtnOutFoc: 1px solid hsl(0, 60%, 40%);
	--ColorBtnBord: transparent;
	--ColorBtnText: black;
	--ColorBtnTextDisab: hsl(0, 0%, 50%);

	--ColorInBack: white;
	--ColorInBord: hsl(0, 60%, 40%);
	--StyInOutFoc: 1px solid hsl(0, 60%, 40%);
	--ColorInText: black;

	--ColorSlideBack: white;
	--StySlideBordFoc: 1px dashed #AAA;
	--ColorSlideTrack: #AAA;
	--ColorSlideTrackHov: hsl(0, 60%, 40%);
	--ColorSlideThumb: black;
	--ColorSlideThumbHov: hsl(0, 60%, 40%);

	--ColorBoardBord: hsl(0, 0%, 50%);
	--ColorBoardBack: black;

	--ColorDieCrnSE: hsl(30, 22%, 68%);
	--ColorDieCrnSWNE: hsl(31, 35%, 85%);
	--ColorDieCrnNW: white;
	--ColorDieFace: hsl(30, 38%, 93%);
	--ColorDieMarkSel: hsla(30, 50%, 50%, 0.4);
	--ColorDieMarkFirst: hsla(0, 45%, 50%, 0.4);
	--ColorDieText: black;

	--ColorBaseBack: hsl(30, 4%, 16%);
	--ColorPattBackDk: hsl(30, 4%, 15%);
	--ColorPattBackLt: hsl(30, 4%, 10%)
}

/* :root {
	--ColorViewBack: hsl(18, 4%, 20%);
	--ColorViewBackAlt: hsl(18, 4%, 26%);

	--ColorDlgBack: hsl(18, 4%, 20%);

	--ColorText: hsl(0, 0%, 90%);
	--ColorTextAlt1: hsl(0, 60%, 70%);
	--ColorTextAlt2: hsl(30, 60%, 70%);

	--ColorLink: hsl(30, 60%, 70%);
	--ColorLinkVisit: hsl(30, 60%, 70%);

	--ColorRule: hsl(0, 0%, 90%);

	--ColorBtnBack: transparent;
	--ColorBtnBackDisab: hsl(18, 4%, 30%);
	--ColorBtnBackHov: hsl(18, 4%, 30%);
	--ColorBtnBackAct: hsl(18, 2%, 15%);
	--StyBtnOutFoc: 1px solid hsl(30, 60%, 40%);
	--ColorBtnBord: hsl(0, 0%, 70%);
	--ColorBtnText: hsl(0, 0%, 90%);
	--ColorBtnTextDisab: hsl(0, 0%, 70%);

	--ColorInBack: hsl(18, 4%, 30%);
	--ColorInBord: hsl(0, 0%, 70%);
	--StyInOutFoc: 1px solid hsl(30, 60%, 40%);
	--ColorInText: hsl(0, 0%, 90%);

	--ColorSlideBack: hsl(18, 4%, 26%);
	--StySlideBordFoc: 1px dashed hsl(30, 40%, 60%);
	--ColorSlideTrack: hsl(0, 0%, 70%);
	--ColorSlideTrackHov: hsl(30, 60%, 60%);
	--ColorSlideThumb: hsl(0, 0%, 90%);
	--ColorSlideThumbHov: hsl(30, 60%, 60%);

	--ColorBoardBord: hsl(18, 4%, 35%);
	--ColorBoardBack: hsl(18, 4%, 12%);

	--ColorDieCrnSE: hsl(30, 12%, 55%);
	--ColorDieCrnSWNE: hsl(30, 22%, 70%);
	--ColorDieCrnNW: hsl(0, 0%, 92%);
	--ColorDieFace: hsl(30, 22%, 85%);
	--ColorDieMarkSel: hsla(30, 50%, 50%, 0.45);
	--ColorDieMarkFirst: hsla(0, 45%, 50%, 0.45);
	--ColorDieText: black;

	--ColorBaseBack: hsl(18, 4%, 15%);
	--ColorPattBackDk: hsl(18, 4%, 15%);
	--ColorPattBackLt: hsl(18, 4%, 10%)
} */

html {
	background-color: var(--ColorBaseBack);

	font-family: var(--FontFamilySans);
	color: var(--ColorText);
}

#Root {
	height: 100vh;

	display: grid;
	place-items: center;
}

h1, h2, h3, h4, h5, h6 {
	font-family: var(--FontFamilySerif);
}

a {
	text-decoration: none;
	color: var(--ColorLink);
}

a:visited {
	color: var(--ColorLinkVisit);
}

hr {
	border: none;
	border-top: 1px dashed var(--ColorRule);
}

ul {
	margin: 0.5rem 0;
}

li {
	margin: 0.5rem 1rem 0.5rem 0;
}

aside {
	font-size: 90%;
}

/* Tables
// ------ */

table {
	width: 100%;
}

thead {
	border-bottom: 1px solid var(--ColorRule);
}

th {
	padding-bottom: 0.5rem;
}

/* 'thead', 'tbody', and 'tr' all lack padding, so there is otherwise no way to
// add space between the 'thead' border and the first body row. Don't add this
// spacing unless there actually is a heading, however: */
thead + tbody:before {
	content: "";
	display: table-row;
	height: 0.75rem;
}

th, td {
	text-align: center;
}

th:first-child,
td:first-child {
	padding-left: 0.5rem;
	text-align: left;
}

th:last-child,
td:last-child {
	padding-right: 0.5rem;
	text-align: right;
}

tbody tr:nth-child(odd) {
	/* Would like to round these corners, but 'border-radius' is ignored here: */
	background-color: var(--ColorViewBackAlt);
}

/* Buttons
// ------- */

button, input[type="submit"], a.Btn {
	background-color: var(--ColorBtnBack);
	padding: 0.5rem 1rem;
	border: 1px solid var(--ColorBtnBord);
	border-radius: 0.25rem;

	font-size: 1.1rem;
	/* Prevent text wrapping by default. This is useful when the containing dialog
	// (for instance #DlgConfirmEnd) has no explicit width. You might guess that
	// the button text would contribute to the dialog width, but instead, the
	// dialog width is set according to its text content, and then the buttons are
	// made to wrap their text to fit that width, unless this is set: */
	white-space: nowrap;
	color: var(--ColorBtnText);

	box-shadow: 0 0 3px hsla(0, 0%, 0%, 0.5);
}

button:focus, input[type="submit"]:focus, a:focus.Btn {
	outline: var(--StyBtnOutFoc);
}

button:disabled, input[type="submit"]:disabled, a:disabled.Btn {
	background-color: var(--ColorBtnBackDisab);
	color: var(--ColorBtnTextDisab);
}

button:disabled:active, input[type="submit"]:disabled:active,
	a:disabled:active.Btn {

	background-color: var(--ColorBtnBackDisab);
	color: var(--ColorBtnTextDisab);
}

button:hover, input[type="submit"]:hover, a:hover.Btn {
	background-color: var(--ColorBtnBackHov);
}

button:active, input[type="submit"]:active, a:active.Btn {
	background-color: var(--ColorBtnBackAct);
}

/* Button rows
// ----------- */

.Btns {
	display: flex;
}

.Btns * {
	margin-left: 0.5rem;
}

.Btns *:first-child {
	margin-left: 0;
}

.Btns.Ctr {
	justify-content: center;
}

/* Each application of this class starts a new button group. */
.Btns *.Group {
	margin-left: auto;
}

/* Text inputs
// ----------- */

input {
	width: 100%;
	margin: 0.25rem 0 0.5rem 0;

	background-color: var(--ColorInBack);
	border: 1px solid var(--ColorInBord);

	font-family: var(--FontFamilySerif);
	font-weight: bold;
	font-size: 1.5rem;

	color: var(--ColorInText);
	text-align: center;
}

input:focus {
	/* Use 'outline' to thicken the border without shifting the layout: */
	outline: var(--StyInOutFoc);
}

/* Range inputs
// ------------
// By default, and contrary to all common sense, range inputs don't change in
// value when the user clicks to one side of the thumb unless the click position
// is closer to another valid position than it is to the current position. Add
// click handler to inputs that derives new value from click position? [to do]
//
// Adapted from:
//
//   https://css-tricks.com/styling-cross-browser-compatible-range-inputs-css/
*/

input[type="range"] {
	/* This hides the original slider, but it also hides the tick marks:*/
	-webkit-appearance: none;
	width: 100%;
	background: transparent;
	/* So that the layout doesn't shift when the focus border is displayed: */
	border: 1px solid transparent;
	padding: 1rem;
	margin: 1rem 0;
}

input[type="range"]:focus {
	outline: none;
	border: var(--StySlideBordFoc);
}

input[type="range"]::-webkit-slider-thumb {
	-webkit-appearance: none;
	/* We want an odd number for Firefox, but Chrome makes the thumb one pixel
	// larger than the indicated size: */
	height: 10px;
	width: 10px;
	border: none;
	border-radius: 5.5px;
	background: var(--ColorSlideThumb);
	cursor: pointer;
	margin-top: -4.5px;
}

input[type="range"]:hover::-webkit-slider-thumb {
	background: var(--ColorSlideThumbHov);
}

input[type="range"]::-moz-range-thumb {
	/* Use an odd number so the thumb can be centered over the 1px track: */
	height: 11px;
	width: 11px;
	border: none;
	border-radius: 5.5px;
	background: var(--ColorSlideThumb);
	cursor: pointer;
}

input[type="range"]:hover::-moz-range-thumb {
	background: var(--ColorSlideThumbHov);
}

input[type="range"]::-webkit-slider-runnable-track {
	width: 100%;
	/* Sometimes Chrome renders this as 2px, other times 1px: */
	height: 1px;
	background: var(--ColorSlideTrack);
	cursor: pointer;
}

input[type="range"]:hover::-webkit-slider-runnable-track {
	background: var(--ColorSlideTrackHov);
}

input[type="range"]::-moz-range-track {
	width: 100%;
	height: 1px;
	background: var(--ColorSlideTrack);
	cursor: pointer;
}

input[type="range"]:hover::-moz-range-track {
	background: var(--ColorSlideTrackHov);
}

/* Dialogs
// ------- */

.ScreenDlg {
	z-index: 1;
	position: fixed;
	left: 0;
	top: 0;
	width: 100vw;
	height: 100vh;
	background-color: hsla(0, 0%, 0%, 0.4);

	display: grid;
	place-items: center;
}

.Dlg {
	border-radius: 0.5rem;
	padding: 1.25rem;
	background-color: var(--ColorDlgBack);
	box-shadow: 0 0 10px hsla(0, 0%, 0%, 0.7);

	font-size: 1.1rem;
	text-align: center;
}

/* Responsive
// ---------- */

.Mob {
	/* 'visibility: collapse' does not seem to work the way it should: */
	display: none;
}

/* Modifiers
// --------- */

.MargT2 {
	margin-top: 0.5em;
}

.MargT3 {
	margin-top: 0.75em;
}

.MargT4 {
	margin-top: 1em;
}

.MargT6 {
	margin-top: 1.5em;
}

.MargT8 {
	margin-top: 2em;
}

.MargV2 {
	margin-top: 0.5em;
	margin-bottom: 0.5em;
}

.MargV3 {
	margin-top: 0.75em;
	margin-bottom: 0.75em;
}

.MargV4 {
	margin-top: 1em;
	margin-bottom: 1em;
}

.MargV6 {
	margin-top: 1.5em;
	margin-bottom: 1.5em;
}

.MargV8 {
	margin-top: 2em;
	margin-bottom: 2em;
}

.Bold {
	font-weight: bold;
}

.Semibold {
	font-weight: 600;
}

.Caps {
	text-transform: uppercase;
}

.Left {
	text-align: left;
}

.Ctr {
	text-align: center;
}

.Right {
	text-align: right;
}

.SideUp {
	writing-mode: vertical-rl;
	transform: rotate(180deg);
}

.SideDown {
	writing-mode: vertical-rl;
}
