/* ViewScore.css
 * -------------
 * Copyright Â©2022 Jeremy Kelly
 * www.anthemion.org
 *
 * We could use more of the page, but even when the entire width is consumed,
 * many boards require scrolling. */

#ViewScore {
	width: calc(100vw - 1rem);
	max-width: 65rem;

	margin: 0.5rem 0;
	padding: 1.5rem;
}

#ViewScore main {
	margin-bottom: 1rem;
	border-bottom: 1px dashed var(--ColorRule);
	padding-bottom: 1.25rem;

	font-size: 1.2rem;
	text-align: center;

	display: grid;
	grid-template-columns: 1fr auto 1fr;
	grid-template-rows: auto 1fr;
}

#ViewScore aside {
	margin-top: 0.5rem;
	padding: 0 2rem;
}

#ViewScore #BoxSetup {
	grid-column: 2;
	grid-row: 1;

	margin: 0 3rem;
	padding-bottom: 1rem;

	display: flex;
	flex-direction: column;
	justify-content: space-evenly;
	align-items: center;
}

#ViewScore #BoxSetup hr {
	width: 100%;
	height: 1px;

	margin: 0;
	border-top: 1px dashed var(--ColorRule);
}

#ViewScore #BoxSetup h3 {
	margin: 0;
	font-family: var(--FontFamilySans);
	font-weight: normal;
	font-size: 1rem;
}

#ViewScore #BoxSetup div {
	font-family: var(--FontFamilySerif);
	font-weight: bold;
	font-size: 1.75rem;
}

#ViewScore #BoxCover {
	grid-column: 1;
	grid-row: 1;

	padding-bottom: 1rem;
}

#ViewScore #BoxCover td {
	text-align: right;
}

#ViewScore #BoxCover td:first-child {
	text-align: left;
}

#ViewScore #BoxHigh {
	grid-column: 3;
	grid-row: 1;

	padding-bottom: 1rem;
}

#ViewScore #BoxHigh tr.High {
	color: var(--ColorTextAlt1);
}

#ViewScore #BoxCover h3,
#ViewScore #BoxHigh h3 {
	margin: 0 0 1rem 0;
}

#ViewScore #ColWords {
	grid-column: 1 / span 3;
	grid-row: 2;

	border-top: 1px dashed var(--ColorRule);
	padding: 0.75rem 0 0 0;

	display: flex;
	flex-direction: column;
}

#ViewScore #ColWords header {
	display: flex;
	justify-content: space-between;

	margin-bottom: 0.75rem;
	padding: 0 0.25rem;

	font-family: var(--FontFamilySerif);
	font-size: 1.5rem;
}

#ViewScore #ColWords header strong {
	font-weight: bold;
	font-style: normal;
	color: var(--ColorTextAlt1);
}

#ViewScore #ColWords header em {
	font-weight: bold;
	font-style: normal;
	color: var(--ColorTextAlt2);
}

#ViewScore #ColWords table {
	/* #BoxWords was displayed as a table, but the wrapping flex layout seems much
	 * better. The 'table' HTML should perhaps be replaced: */
	display: block;
}

#ViewScore #ColWords tbody {
	display: flex;
	flex-wrap: wrap;
	justify-content: center;
}

#ViewScore #ColWords tr {
	flex: 1;

	min-width: 8rem;
	max-width: 33.333%;
	display: flex;
	justify-content: space-between;
	align-items: center;

	margin: 0.1rem 0.1rem;
	border-radius: 0.2rem;

	background-color: var(--ColorCellBackAlt);
	cursor: pointer;
}

/* It might be nice to have the cell 'pop up' in the direction of the viewer
 * when hovering, but it could be a nuisance to do that without disturbing the
 * cell layout: */
#ViewScore #ColWords tr:hover {
	background-color: var(--ColorCellBackAltHov);
}

#ViewScore #ColWords tr:active {
	background-color: var(--ColorCellBackAltAct);
}

/* Within the row, only the 'td' elements produce the click events we use to
 * display the Word Score dialog, so these must be made to span the entire
 * width. */

#ViewScore #BoxWords td {
	display: inline;
	/* Fix the size of the score cells so that the word is always centered: */
	flex: 0 0 1.25em;

	text-align: center;
}

#ViewScore #BoxWords td:nth-child(2) {
	flex: 1;

	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

#ViewScore #BoxWords tr.WordUser td:nth-child(2) {
	font-style: italic;
}

#ViewScore #BoxWords tr.MissUser {
	background-color: var(--ColorCellBack);
}

#ViewScore #BoxWords tr.MissUser:hover {
	background-color: var(--ColorCellBackHov);
}

#ViewScore #BoxWords tr.MissUser:active {
	background-color: var(--ColorCellBackAct);
}

#ViewScore #BoxWords th:first-child,
#ViewScore #BoxWords td:first-child,
#ViewScore #BoxWords th:last-child,
#ViewScore #BoxWords td:last-child {
	font-family: var(--FontFamilySerif);
	font-weight: bold;
	font-size: 1.1rem;
	color: var(--ColorTextAlt2);
}

#ViewScore .Btns {
	margin-top: 1.25rem;
}

/* Responsive layouts
 * ------------------ */

@media screen and (max-width: 800px) {
	#ViewScore {
		--HeightTrayBtn: 4.5rem;

		width: 100vw;

		margin-top: 0;
		border: none;
		border-radius: 0;
		padding: 1rem 1rem calc(var(--HeightTrayBtn) - 0.25rem) 1rem;
	}

	#ViewScore main {
		border-bottom: none;
		padding-bottom: 0;

		grid-template-columns: auto;
		grid-template-rows: auto auto auto auto;
	}

	#ViewScore #BoxSetup {
		grid-column: 1;
		grid-row: 1;

		margin: 0;
		padding: 0 0 1rem 0;

		flex-direction: row;
	}

	#ViewScore #BoxSetup hr {
		height: 3.25rem;
		width: 1px;

		margin: 0;
		border: 0;
		border-left: 1px dashed var(--ColorRule);
	}

	#ViewScore #ColWords {
		grid-column: 1;
		grid-row: 2;

		padding: 1rem 0 1.75rem 0;
	}

	#ViewScore #BoxCover {
		grid-column: 1;
		grid-row: 3;

		margin: 0;
		border: none;
		border-top: 1px dashed var(--ColorRule);
		padding: 1rem 0 1.25rem 0;
	}

	#ViewScore #BoxHigh {
		grid-column: 1;
		grid-row: 4;

		margin: 0;
		border: none;
		border-top: 1px dashed var(--ColorRule);
		padding: 1rem 0 0 0;
	}

	/* Button tray
	 * -----------
	 * In this layout, we will move the buttons to a 'tray' that is fixed to the
	 * bottom of the viewport. Keeping the buttons visible helps users understand
	 * what they should do next.
	 *
	 * In high-scoring games, the view will exceed the viewport height for desktop
	 * users as well, and the same problem will be faced. Moving the buttons to
	 * the bottom of a large display would make them less visible, however, so we
	 * will hope they scroll instead.
	 *
	 * I considered this for the other mobile layouts, but those never exceed the
	 * viewport height, and it would be even uglier there than it is here. */

	#ViewScore #BtnsMain {
		position: fixed;
		left: 0;
		bottom: 0;
		width: 100%;
		height: var(--HeightTrayBtn);

		border-top: var(--StyTrayBord);
		padding: 0.75rem;

		background-color: var(--ColorTrayBack);
		box-shadow: 0 0 10px hsla(0, 0%, 0%, 0.5);
	}
}
