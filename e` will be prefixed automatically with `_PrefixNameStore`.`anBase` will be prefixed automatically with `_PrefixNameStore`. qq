[1mdiff --git a/README.md b/README.md[m
[1mindex 8f3567b..662eba5 100644[m
[1m--- a/README.md[m
[1m+++ b/README.md[m
[36m@@ -89,10 +89,12 @@[m [mfunction uUpdFull_CacheRead() {[m
   ...[m
 ```[m
 [m
[31m-Other times, functions are named only with nouns. When this is done, the noun is what the function _returns_. Class factory methods often have roots that begin with `From`; the noun is implicit, since these static functions can be invoked only after specifying the class:[m
[32m+[m[32mOther times, functions are named only with nouns. When this is done, the noun is what the function _returns_.[m
[32m+[m
[32m+[m[32mFactory functions often have roots that begin with `From`; the noun is implicit, since these static functions can be invoked only after specifying the class:[m
 [m
 ```[m
[31m-const oBoard = tBoard.suFromPlain(oPlainBoard);[m
[32m+[m[32mconst oBoard = Board.uFromParse(oParseBoard);[m
 ```[m
 [m
 Longer words are abbreviated within identifiers, file and folder names, _et cetera_. A word that is abbreviated once is abbreviated the _same way_ throughout the project.[m
[1mdiff --git a/src/Board/Board.js b/src/Board/Board.js[m
[1mindex 56bde3d..dc07645 100644[m
[1m--- a/src/Board/Board.js[m
[1m+++ b/src/Board/Board.js[m
[36m@@ -5,50 +5,54 @@[m
 //[m
 // Import with:[m
 //[m
[31m-//   import { tBoard } from "../Board.js";[m
[32m+[m[32m//   import * as Board from "../Board/Board.js";[m
 //[m
 [m
[31m-import { tConfigPoolDie, tPoolDie } from "./PoolDie.js";[m
[31m-import { tDie } from "./Die.js";[m
[32m+[m[32mimport { tPoolDie } from "./PoolDie.js";[m
[32m+[m[32mimport * as Die from "./Die.js";[m
 import * as Const from "../Const.js";[m
 [m
[31m-/** Represents a single game board. */[m
[31m-export class tBoard {[m
[31m-	/** Creates an instance from a plain object and returns it. This class is[m
[31m-	 *  immutable. */[m
[31m-	static suFromPlain(aPlain) {[m
[31m-		if (!aPlain) return null;[m
[31m-[m
[31m-		const oDice = aPlain._Dice.map(a => tDie.suFromPlain(a));[m
[31m-		return new tBoard(oDice);[m
[31m-	}[m
[31m-[m
[31m-	/** Returns a new, random board, with dice produced by the specified[m
[31m-	 *  `tConfigPoolDie` instance. */[m
[31m-	static suNewRnd(aGenRnd, aConfigPoolDie) {[m
[31m-		if (!aConfigPoolDie)[m
[31m-			throw Error("tBoard.suNewRnd: Pool configuration not provided");[m
[31m-[m
[31m-		const oDice = [];[m
[31m-		const oPool = new tPoolDie(aGenRnd, aConfigPoolDie);[m
[31m-		for (let o = 0; o < Const.CtDie; ++o)[m
[31m-			oDice.push(oPool.uDraw())[m
[31m-		return new tBoard(oDice);[m
[31m-	}[m
[31m-[m
[31m-	constructor(aDice) {[m
[31m-		/** An array of column arrays, which themselves contain tDie instances. */[m
[31m-		this._Dice = aDice;[m
[31m-[m
[31m-		Object.freeze(this);[m
[31m-	}[m
[31m-[m
[31m-	/** Returns the die at the specified Pt2 position, throwing if either[m
[31m-	 *  coordinate is out of range. */[m
[31m-	uDie(aPos) {[m
[31m-		const oj = aPos.X + (aPos.Y * Const.WthBoard);[m
[31m-		if ((oj < 0) || (oj >= Const.CtDie))[m
[31m-			throw Error("tBoard.uDie: Invalid position");[m
[31m-		return this._Dice[oj];[m
[31m-	}[m
[32m+[m[32m// Board[m
[32m+[m[32m// -----[m
[32m+[m[32m// Each Board record represents a single game board.[m
[32m+[m
[32m+[m[32m/** Creates a Board record from the specified Die record array. */[m
[32m+[m[32mexport function uNew(aDice) {[m
[32m+[m	[32mconst oBoard = {[m
[32m+[m		[32m/** An array of Die records, arranged row-after-row. */[m
[32m+[m		[32m_Dice: aDice[m
[32m+[m	[32m};[m
[32m+[m	[32mObject.freeze(oBoard);[m
[32m+[m	[32mreturn oBoard;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m/** Creates a Board record from an object produced by `JSON.parse`, and returns[m
[32m+[m[32m *  it, or returns `null` if `aParse` is falsy. */[m
[32m+[m[32mexport function uFromParse(aParse) {[m
[32m+[m	[32mif (!aParse) return null;[m
[32m+[m
[32m+[m	[32mconst oDice = aParse._Dice.map(a => Die.uFromParse(a));[m
[32m+[m	[32mreturn uNew(oDice);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m/** Returns a new, random board, with dice produced by the specified[m
[32m+[m[32m *  `tConfigPoolDie` instance. */[m
[32m+[m[32mexport function uNewRnd(aGenRnd, aConfigPoolDie) {[m
[32m+[m	[32mif (!aConfigPoolDie)[m
[32m+[m		[32mthrow Error("Board.uNewRnd: Pool configuration not provided");[m
[32m+[m
[32m+[m	[32mconst oDice = [];[m
[32m+[m	[32mconst oPool = new tPoolDie(aGenRnd, aConfigPoolDie);[m
[32m+[m	[32mfor (let o = 0; o < Const.CtDie; ++o)[m
[32m+[m		[32moDice.push(oPool.uDraw())[m
[32m+[m	[32mreturn uNew(oDice);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m/** Returns the die at the specified Pt2 position within a Die, throwing if[m
[32m+[m[32m *  either coordinate is out of range. */[m
[32m+[m[32mexport function uDie(aBoard, aPos) {[m
[32m+[m	[32mconst oj = aPos.X + (aPos.Y * Const.WthBoard);[m
[32m+[m	[32mif ((oj < 0) || (oj >= Const.CtDie))[m
[32m+[m		[32mthrow Error("Board uDie: Invalid position");[m
[32m+[m	[32mreturn aBoard._Dice[oj];[m
 }[m
[1mdiff --git a/src/Board/Die.js b/src/Board/Die.js[m
[1mindex 34ef50a..2949b82 100644[m
[1m--- a/src/Board/Die.js[m
[1m+++ b/src/Board/Die.js[m
[36m@@ -5,33 +5,37 @@[m
 //[m
 // Import with:[m
 //[m
[31m-//   import { tDie } from "../Die.js";[m
[32m+[m[32m//   import * as Die from "../Die.js";[m
 //[m
 [m
 import * as Dir4 from "../Util/Dir4.js";[m
 [m
[31m-/** Represents one die within the board. This class is immutable. */[m
[31m-export class tDie {[m
[31m-	/** Creates an instance from the specified plain object and returns it. */[m
[31m-	static suFromPlain(aPlain) {[m
[31m-		if (!aPlain) return null;[m
[32m+[m[32m// Die[m
[32m+[m[32m// ---[m
[32m+[m[32m// Each Die record represents one die within a board.[m
 [m
[31m-		return new tDie(aPlain.Text, Dir4.Vals[aPlain.Dir4]);[m
[31m-	}[m
[31m-[m
[31m-	/** Creates an instance with the specified text and orientation. Throws if[m
[31m-	 *  aDir4 is not a member of Dir4.Vals. */[m
[31m-	constructor(aText, aDir4) {[m
[31m-		if (!Dir4.uCk(aDir4))[m
[31m-			throw Error(`tDie: Invalid direction '${this.Dir4}'`);[m
[32m+[m[32m/** Creates a Die record with the specified text and orientation. Throws if[m
[32m+[m[32m *  aDir4 is not a member of Dir4.Vals. */[m
[32m+[m[32mexport function uNew(aText, aDir4) {[m
[32m+[m	[32mif (!Dir4.uCk(aDir4))[m
[32m+[m		[32mthrow Error(`Die uNew: Invalid direction '${this.Dir4}'`);[m
 [m
[32m+[m	[32mconst oDie = {[m
 		/** The die text. */[m
[31m-		this.Text = aText;[m
[32m+[m		[32mText: aText,[m
 		/** The side of the die with which the text top aligns. */[m
[31m-		this.Dir4 = aDir4;[m
[32m+[m		[32mDir4: aDir4,[m
 		/** Set to `true` if the text should be underlined. */[m
[31m-		this.CkUnder = [ "L", "T", "N", "Z", "W" ].includes(aText);[m
[32m+[m		[32mCkUnder: [ "L", "T", "N", "Z", "W" ].includes(aText)[m
[32m+[m	[32m};[m
[32m+[m	[32mObject.freeze(oDie);[m
[32m+[m	[32mreturn oDie;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m/** Creates a Die record from an object produced by `JSON.parse`, and returns[m
[32m+[m[32m *  it, or returns `null` if `aParse` is falsy. */[m
[32m+[m[32mexport function uFromParse(aParse) {[m
[32m+[m	[32mif (!aParse) return null;[m
 [m
[31m-		Object.freeze(this);[m
[31m-	}[m
[32m+[m	[32mreturn uNew(aParse.Text, Dir4.Vals[aParse.Dir4]);[m
 }[m
[1mdiff --git a/src/Board/Die.test.js b/src/Board/Die.test.js[m
[1mindex 1ed306e..7dddaf8 100644[m
[1m--- a/src/Board/Die.test.js[m
[1m+++ b/src/Board/Die.test.js[m
[36m@@ -3,23 +3,23 @@[m
 // Copyright Â©2022 Jeremy Kelly[m
 // www.anthemion.org[m
 [m
[31m-import { tDie } from "./Die.js";[m
[32m+[m[32mimport * as Die from "./Die.js";[m
 import * as Dir4 from "../Util/Dir4.js";[m
 [m
[31m-test("Create tDie: Underlined", () => {[m
[32m+[m[32mtest("Create Die: Underlined", () => {[m
 	const oText = "T";[m
 	const oDir = Dir4.Vals.E;[m
[31m-	const oDie = new tDie(oText, oDir);[m
[32m+[m	[32mconst oDie = Die.uNew(oText, oDir);[m
 [m
 	expect(oDie.Text).toBe(oText);[m
 	expect(oDie.Dir4).toBe(oDir);[m
 	expect(oDie.CkUnder).toBe(true);[m
 });[m
 [m
[31m-test("Create tDie: Not underlined", () => {[m
[32m+[m[32mtest("Create Die: Not underlined", () => {[m
 	const oText = "O";[m
 	const oDir = Dir4.Vals.E;[m
[31m-	const oDie = new tDie(oText, oDir);[m
[32m+[m	[32mconst oDie = Die.uNew(oText, oDir);[m
 [m
 	expect(oDie.Text).toBe(oText);[m
 	expect(oDie.Dir4).toBe(oDir);[m
[1mdiff --git a/src/Board/PoolDie.js b/src/Board/PoolDie.js[m
[1mindex 0284ad0..0fc1b2b 100644[m
[1m--- a/src/Board/PoolDie.js[m
[1m+++ b/src/Board/PoolDie.js[m
[36m@@ -9,7 +9,7 @@[m
 //[m
 [m
 import { tConfigPoolText, tPoolText } from "./PoolText.js";[m
[31m-import { tDie } from "./Die.js";[m
[32m+[m[32mimport * as Die from "./Die.js";[m
 import * as Dir4 from "../Util/Dir4.js";[m
 import * as Const from "../Const.js";[m
 [m
[36m@@ -55,9 +55,9 @@[m [mexport class tConfigPoolDie {[m
 	}[m
 }[m
 [m
[31m-/** Stores two pools of text values, which can be drawn randomly as `tDie`[m
[31m- *  instances to produce a board. Set `aConfig` to a `tConfigPoolDie` instance[m
[31m- *  that determines counts within the pools. This class is mutable. */[m
[32m+[m[32m/** Stores two pools of text values, which can be drawn randomly as Die records[m
[32m+[m[32m *  to produce a board. Set `aConfig` to a `tConfigPoolDie` instance that[m
[32m+[m[32m *  determines counts within the pools. This class is mutable. */[m
 export class tPoolDie {[m
 	constructor(aGenRnd, aConfig) {[m
 		if (!aConfig)[m
[36m@@ -121,8 +121,8 @@[m [mexport class tPoolDie {[m
 		this._TextsConson = new tPoolText(aGenRnd, oCtsConson, aConfig.Conson);[m
 	}[m
 [m
[31m-	/** Selects and returns a random `tDie` instance, after decrementing the vowel[m
[31m-	 *  or consonant count, as appropriate. */[m
[32m+[m	[32m/** Selects and returns a random Die record, after decrementing the vowel or[m
[32m+[m	[32m *  consonant count, as appropriate. */[m
 	uDraw() {[m
 		const oCtText = this._CtVow + this._CtConson;[m
 		if (oCtText < 1)[m
[36m@@ -141,7 +141,7 @@[m [mexport class tPoolDie {[m
 		}[m
 [m
 		const oDir = Dir4.uRnd(this._GenRnd);[m
[31m-		return new tDie(oText, oDir);[m
[32m+[m		[32mreturn Die.uNew(oText, oDir);[m
 	}[m
 }[m
 [m
[1mdiff --git a/src/Persist.js b/src/Persist.js[m
[1mindex 5a64535..ae932d5 100644[m
[1m--- a/src/Persist.js[m
[1m+++ b/src/Persist.js[m
[36m@@ -32,13 +32,17 @@[m [mimport * as UtilJSON from "./Util/UtilJSON.js";[m
 // implications in some cases. Ours is already open to the public:[m
 import Pack from "../package.json";[m
 [m
[31m-/** Reads the specified value from local storage, after prefixing name `an` with[m
[31m- *  `_PrefixNameStore`. */[m
[31m-export function uRead(an) {[m
[31m-	const onFull = _PrefixNameStore + an;[m
[31m-	const oJSON = localStorage.getItem(onFull);[m
 [m
[31m-	if (oJSON === null) return undefined;[m
[32m+[m[32m/** Reads the specified value from local storage, after prefixing name `anBase`[m
[32m+[m[32m *  with `_PrefixNameStore`, or `aDef`, if the key is not found. */[m
[32m+[m[32mexport function uRead(anBase, aDef = undefined) {[m
[32m+[m	[32mconst onFull = _PrefixNameStore + anBase;[m
[32m+[m	[32mconst oJSON = localStorage.getItem(onFull);[m
[32m+[m	[32m// Because we are storing everything as a string, this lets us discern between[m
[32m+[m	[32m// values that were explicitly set to `null`, and those that are missing[m
[32m+[m	[32m// entirely. The `localStorage` API, incredibly, does not provide a direct way[m
[32m+[m	[32m// to make that distinction:[m
[32m+[m	[32mif (oJSON === null) return aDef;[m
 	// It would be nice to reverse the `_uNumsSpecialToStr` conversion here, but[m
 	// the string 'Infinity' is a likely value for some fields, and the original[m
 	// Ogle code did not need or use `_uNumsSpecialToStr`, so there are `null`[m
[36m@@ -50,7 +54,7 @@[m [mexport function uRead(an) {[m
 [m
 /** Writes the specified value to the local storage, after prefixing `an` with[m
  *  `_PrefixNameStore`. Also updates the `VerApp` value. */[m
[31m-export function uWrite(an, aVal) {[m
[32m+[m[32mexport function uWrite(anBase, aVal) {[m
 	// Write the version number. Note that this value is not drawn from the store:[m
 	localStorage.setItem([m
 		_PrefixNameStore + "VerApp",[m
[36m@@ -58,7 +62,7 @@[m [mexport function uWrite(an, aVal) {[m
 	);[m
 	// Write the value:[m
 	localStorage.setItem([m
[31m-		_PrefixNameStore + an,[m
[32m+[m		[32m_PrefixNameStore + anBase,[m
 		// Whatver else happens, writing `null` for infinite or `NaN` values cannot[m
 		// be correct, as it cannot be deserialized accurately:[m
 		JSON.stringify(aVal, UtilJSON.uNumFix)[m
[1mdiff --git a/src/Round/Yield.js b/src/Round/Yield.js[m
[1mindex ae21730..bc2891e 100644[m
[1m--- a/src/Round/Yield.js[m
[1m+++ b/src/Round/Yield.js[m
[36m@@ -16,7 +16,6 @@[m [mexport const Vals = [[m
 	// I guess we're storing arrays here in case another value is needed, as in[m
 	// the pace elements?:[m
 	[ Rg.uNew(1, 10) ],[m
[31m-	[ Rg.uNew(1, 20) ],[m
 	[ Rg.uNew(1, 40) ],[m
 	[ Rg.uNew(60, 100)],[m
  	[ Rg.uNew(120, 160) ],[m
[36m@@ -28,7 +27,7 @@[m [mObject.freeze(Vals);[m
 //[m
 // Defining the default this way causes trouble when the array is modified:[m
 // [refactor][m
[31m-const jValDef = 5;[m
[32m+[m[32mconst jValDef = 4;[m
 [m
 /** Returns the default yield range. */[m
 export function uDef() {[m
[36m@@ -47,8 +46,8 @@[m [mexport function uIdxValMatchOrDef(aSetup) {[m
 export function uDesc(ajYield) {[m
 	const oYield = Vals[ajYield][0];[m
 	if (!isFinite(oYield.Start))[m
[31m-		return `At most ${oYield.End} words`;[m
[32m+[m		[32mreturn `At most ${oYield.End} words in the board`;[m
 	if (!isFinite(oYield.End))[m
[31m-		return `${oYield.Start} or more words`;[m
[31m-	return `Between ${oYield.Start} and ${oYield.End} words`;[m
[32m+[m		[32mreturn `${oYield.Start} or more words in the board`;[m
[32m+[m	[32mreturn `${oYield.Start} to ${oYield.End} words in the board`;[m
 }[m
[1mdiff --git a/src/Round/Yield.test.js b/src/Round/Yield.test.js[m
[1mindex 749a90a..dca40c7 100644[m
[1m--- a/src/Round/Yield.test.js[m
[1m+++ b/src/Round/Yield.test.js[m
[36m@@ -9,5 +9,7 @@[m [mimport * as Rg from "../Util/Rg.js";[m
 test("Yield: uDef", () => {[m
 	const oAct = Yield.uDef();[m
 	const oExpect = [ Rg.uNew(180, Infinity) ];[m
[32m+[m	[32m// If this fails, it is probably because the Yield `Vals` array was changed[m
[32m+[m	[32m// without a corresponding change to `jValDef`:[m
 	expect(oAct).toEqual(oExpect);[m
 });[m
[1mdiff --git a/src/Search/Lex.js b/src/Search/Lex.js[m
[1mindex 16c8c68..b0d37aa 100644[m
[1m--- a/src/Search/Lex.js[m
[1m+++ b/src/Search/Lex.js[m
[36m@@ -39,10 +39,14 @@[m [mclass tLex {[m
 	constructor() {[m
 		/** An array of strings representing all user-entered words. */[m
 		//[m
[31m-		// There is no need for this to be moved to the store; it is not used to[m
[31m-		// render pages, and this class is instantiated only once, when the app[m
[31m-		// loads:[m
[31m-		this.WordsUser = Persist.uRead("WordsUser");[m
[32m+[m		[32m// There is no need for this data to be moved to the store; it is not used[m
[32m+[m		[32m// to render pages, and `tLex` is instantiated only once, when the app[m
[32m+[m		[32m// loads.[m
[32m+[m		[32m//[m
[32m+[m		[32m// Jest mocks the `localStorage` object, so the `Persist` system will run,[m
[32m+[m		[32m// but it will not return anything. We could inject this particular[m
[32m+[m		[32m// dependency, but there is no need right now:[m
[32m+[m		[32mthis.WordsUser = Persist.uRead("WordsUser", []);[m
 		this.WordsUser.sort(Search.uCompareStrFast);[m
 [m
 		/** An array of strings representing all searchable words. This array will[m
[1mdiff --git a/src/Search/SearchBoard.test.js b/src/Search/SearchBoard.test.js[m
[1mindex c3d1ccd..b8ccb62 100644[m
[1m--- a/src/Search/SearchBoard.test.js[m
[1m+++ b/src/Search/SearchBoard.test.js[m
[36m@@ -5,7 +5,7 @@[m
 [m
 import { tConfigPoolDie } from "../Board/PoolDie.js";[m
 import * as SearchBoard from "./SearchBoard.js";[m
[31m-import { tBoard } from "../Board/Board.js";[m
[32m+[m[32mimport * as Board from "../Board/Board.js";[m
 import Lex from "./Lex.js";[m
 import { tGenRnd } from "../Util/Rnd.js";[m
 import * as Search from "../Util/Search.js";[m
[36m@@ -14,7 +14,7 @@[m [mimport * as Search from "../Util/Search.js";[m
 const SeedTextDef = "OGLE";[m
 /** The raw word output expected from the first board produced by SeedTextDef.[m
  *  These will change if the seed, the random number generator, the die pool, or[m
[31m- *  the lexicon changes. */[m
[32m+[m[32m *  the base lexicon changes. */[m
 const WordsExpDef = [[m
 	"neat", "neon", "neonatal", "neonatal", "neat", "eating", "entangle", "alto",[m
 	"atonal", "atone", "atone", "atone", "anti", "anting", "anal", "analog",[m
[36m@@ -48,7 +48,7 @@[m [mWordsExpDef.sort(Search.uCompareStrFast);[m
 // test("SearchBoard uExec: Output", () => {[m
 // 	const oGenRnd = new tGenRnd(SeedTextDef);[m
 // 	const oConfigPoolDie = tConfigPoolDie.suDef();[m
[31m-// 	const oBoard = tBoard.suNewRnd(oGenRnd, oConfigPoolDie);[m
[32m+[m[32m// 	const oBoard = Board.uNewRnd(oGenRnd, oConfigPoolDie);[m
 // 	const oSelsWord = SearchBoard.uExec(Lex.WordsSearch, oBoard);[m
 // 	const oWords = oSelsWord.map(a => a.TextAll).sort(Search.uCompareStrFast);[m
 // 	expect(oWords).toEqual(WordsExpDef);[m
[36m@@ -61,7 +61,7 @@[m [mtest("SearchBoard uExec: Speed", () => {[m
 	const oTimeStart = Date.now();[m
 	for (let o = 0; o < oCt; ++o) {[m
 		const oConfigPoolDie = tConfigPoolDie.suDef();[m
[31m-		const oBoard = tBoard.suNewRnd(oGenRnd, oConfigPoolDie);[m
[32m+[m		[32mconst oBoard = Board.uNewRnd(oGenRnd, oConfigPoolDie);[m
 		const oSelsWord = SearchBoard.uExec(Lex.WordsSearch, oBoard);[m
 		expect(oSelsWord.length).toBeGreaterThan(10);[m
 	}[m
[1mdiff --git a/src/Search/SelBoard.js b/src/Search/SelBoard.js[m
[1mindex 05f1c73..703532c 100644[m
[1m--- a/src/Search/SelBoard.js[m
[1m+++ b/src/Search/SelBoard.js[m
[36m@@ -8,6 +8,7 @@[m
 //   import { tSelBoard } from "./Search/SelBoard.js";[m
 //[m
 [m
[32m+[m[32mimport * as Board from "../Board/Board.js";[m
 import * as EntWord from "../Round/EntWord.js";[m
 import * as Arr2 from "../Util/Arr2.js";[m
 import * as Rect from "../Util/Rect.js";[m
[36m@@ -48,7 +49,7 @@[m [mexport class tSelBoard {[m
 		this.CksByPos = oCksByPosPrev;[m
 		Arr2.uSet(this.CksByPos, aPos, true);[m
 [m
[31m-		const oDie = aBoard.uDie(aPos);[m
[32m+[m		[32mconst oDie = Board.uDie(aBoard, aPos);[m
 		const oText = oDie.Text.toLowerCase();[m
 		/** The text selected by this instance and its predecessors, in lowercase.[m
 		 *  Recall that the 'Qu' die counts as two letters, not one. */[m
[36m@@ -86,7 +87,7 @@[m [mexport class tSelBoard {[m
 		while (oSel) {[m
 			oPosi.unshift(oSel.Pos);[m
 [m
[31m-			const oDie = this.Board.uDie(oSel.Pos);[m
[32m+[m			[32mconst oDie = Board.uDie(this.Board, oSel.Pos);[m
 			oTexts.unshift(oDie.Text);[m
 [m
 			oSel = oSel.SelPrev;[m
[1mdiff --git a/src/Search/WorkSearch.js b/src/Search/WorkSearch.js[m
[1mindex 0e30eca..833281a 100644[m
[1m--- a/src/Search/WorkSearch.js[m
[1m+++ b/src/Search/WorkSearch.js[m
[36m@@ -7,7 +7,7 @@[m
 [m
 import { tConfigPoolDie } from "../Board/PoolDie.js";[m
 import * as Setup from "../Round/Setup.js";[m
[31m-import { tBoard } from "../Board/Board.js";[m
[32m+[m[32mimport * as Board from "../Board/Board.js";[m
 import * as SearchBoard from "./SearchBoard.js";[m
 import { tCard } from "../Round/Card.js";[m
 import { tGenRnd } from "../Util/Rnd.js";[m
[36m@@ -32,7 +32,7 @@[m [monmessage = function (aMsg) {[m
 		let oCard;[m
 		let oj = 0;[m
 		while (true) {[m
[31m-			oBoard = tBoard.suNewRnd(oGenRnd, oConfigPools);[m
[32m+[m			[32moBoard = Board.uNewRnd(oGenRnd, oConfigPools);[m
 			const oSels = SearchBoard.uExec(aMsg.data.WordsSearch, oBoard);[m
 			oCard = tCard.suFromSelsBoard(oSels);[m
 			if (Rg.uCkContain(oSetup.Yield, oCard.Score)) {[m
[1mdiff --git a/src/Store/SliceApp.js b/src/Store/SliceApp.js[m
[1mindex fa6a19d..c7690e1 100644[m
[1m--- a/src/Store/SliceApp.js[m
[1m+++ b/src/Store/SliceApp.js[m
[36m@@ -24,14 +24,14 @@[m [mexport const Slice = createSlice({[m
 	initialState: {[m
 		/** The Cfg record containing the player's app-level configuration[m
 		 *  selections. */[m
[31m-		Cfg: Persist.uGetPlain("Cfg") ?? Cfg.uDef(),[m
[32m+[m		[32mCfg: Persist.uRead("Cfg") ?? Cfg.uDef(),[m
 		/** The Setup record containing the player's game configuration selections. */[m
[31m-		Setup: Setup.uFromParse(Persist.uGetPlain("Setup")) ?? Setup.uDef(),[m
[32m+[m		[32mSetup: Setup.uFromParse(Persist.uRead("Setup")) ?? Setup.uDef(),[m
 		/** A `StsApp` value that determines which view is visible. */[m
 		//[m
[31m-		// 'App' seems redundant now, but removing it would change the local storage[m
[31m-		// key:[m
[31m-		StApp: Persist.uGetPlain("StApp") ?? StsApp.Sets[m
[32m+[m		[32m// 'App' seems redundant in this name, but remember that the local storage[m
[32m+[m		[32m// keys must be unique across all slices:[m
[32m+[m		[32mStApp: Persist.uRead("StApp") ?? StsApp.Sets[m
 	},[m
 [m
 	reducers: {[m
[1mdiff --git a/src/UI/DlgScoreWord.js b/src/UI/DlgScoreWord.js[m
[1mindex e0e660e..b372491 100644[m
[1m--- a/src/UI/DlgScoreWord.js[m
[1m+++ b/src/UI/DlgScoreWord.js[m
[36m@@ -9,7 +9,7 @@[m
 //[m
 [m
 import "./DlgScoreWord.css";[m
[31m-import { tBoard } from "../Board/Board.js";[m
[32m+[m[32mimport * as Board from "../Board/Board.js";[m
 import * as EntWord from "../Round/EntWord.js";[m
 import { tScoreWord, StatsWord } from "../Round/ScoreWord.js";[m
 import LookBoard from "./LookBoard.js";[m
[36m@@ -23,7 +23,7 @@[m [mimport PropTypes from "prop-types";[m
 // ------------[m
 [m
 DlgScoreWord.propTypes = {[m
[31m-	Board: PropTypes.instanceOf(tBoard).isRequired,[m
[32m+[m	[32mBoard: PropTypes.object.isRequired,[m
 	ScoreWord: PropTypes.instanceOf(tScoreWord).isRequired,[m
 	uHandOK: PropTypes.func.isRequired[m
 };[m
[36m@@ -31,7 +31,7 @@[m [mDlgScoreWord.propTypes = {[m
 /** The Word Score dialog, to be displayed when a word entry is clicked in the[m
  *  Score view. The following props are supported:[m
  *[m
[31m- *  - Board: A tBoard instance representing the board to be displayed. This prop[m
[32m+[m[32m *  - Board: A Board record representing the board to be displayed. This prop[m
  *    is required;[m
  *[m
  *  - ScoreWord: A tScoreWord instance representing the word entry to be[m
[1mdiff --git a/src/UI/LookBoard.js b/src/UI/LookBoard.js[m
[1mindex 5ab11c8..200abea 100644[m
[1m--- a/src/UI/LookBoard.js[m
[1m+++ b/src/UI/LookBoard.js[m
[36m@@ -12,7 +12,7 @@[m [mimport "./LookBoard.css";[m
 import BackDie from "./BackDie.js";[m
 import ConnSel from "./ConnSel.js";[m
 import LookDie from "./LookDie.js";[m
[31m-import { tBoard } from "../Board/Board.js";[m
[32m+[m[32mimport * as Board from "../Board/Board.js";[m
 import * as EntWord from "../Round/EntWord.js";[m
 import * as Rect from "../Util/Rect.js";[m
 import * as Const from "../Const.js";[m
[36m@@ -24,7 +24,7 @@[m [mimport PropTypes from "prop-types";[m
 // ---------[m
 [m
 LookBoard.propTypes = {[m
[31m-	Board: PropTypes.instanceOf(tBoard).isRequired,[m
[32m+[m	[32mBoard: PropTypes.object.isRequired,[m
 	// EntWord record:[m
 	Ent: PropTypes.object,[m
 	CkPause: PropTypes.bool,[m
[36m@@ -36,7 +36,7 @@[m [mLookBoard.propTypes = {[m
 /** Displays the board, and accepts user play input. The following props are[m
  *  supported:[m
  *[m
[31m- *  - Board: A tBoard instance representing the board to be displayed. This prop[m
[32m+[m[32m *  - Board: A Board record representing the board to be displayed. This prop[m
  *    is required;[m
  *[m
  *  - Ent: An EntWord record representing the board selection, or a falsy value[m
[36m@@ -103,7 +103,7 @@[m [mexport default function LookBoard(aProps) {[m
 		const oiPosi = Rect.uPosi(Const.RectBoard);[m
 		for (const oPos of oiPosi) {[m
 			const oKey = oPos.X + "/" + oPos.Y;[m
[31m-			const oDie = aProps.Board.uDie(oPos);[m
[32m+[m			[32mconst oDie = Board.uDie(aProps.Board, oPos);[m
 			const oCkDisp = !aProps.uCallTog;[m
 			const oCkSel = aProps.Ent && EntWord.uCkAt(aProps.Ent, oPos);[m
 			const oCkSelFirst = aProps.Ent && !EntWord.uPosPrev(aProps.Ent, oPos);[m
[1mdiff --git a/src/UI/LookDie.js b/src/UI/LookDie.js[m
[1mindex 65af24a..962ff16 100644[m
[1m--- a/src/UI/LookDie.js[m
[1m+++ b/src/UI/LookDie.js[m
[36m@@ -9,7 +9,7 @@[m
 //[m
 [m
 import "./Die.css";[m
[31m-import { tDie } from "../Board/Die.js";[m
[32m+[m[32mimport * as Die from "../Board/Die.js";[m
 import * as MetrDie from "./MetrDie.js";[m
 import Feed from "../Feed.js";[m
 import * as Dir4 from "../Util/Dir4.js";[m
[36m@@ -23,7 +23,7 @@[m [mimport PropTypes from "prop-types";[m
 [m
 LookDie.propTypes = {[m
 	Pos: PropTypes.object.isRequired,[m
[31m-	Die: PropTypes.instanceOf(tDie).isRequired,[m
[32m+[m	[32mDie: PropTypes.object.isRequired,[m
 	CkSel: PropTypes.bool,[m
 	CkEnab: PropTypes.bool,[m
 	CkPause: PropTypes.bool,[m
[36m@@ -37,7 +37,7 @@[m [mLookDie.propTypes = {[m
  *  - Pos: A Pt2 record representing the board position that contains this[m
  *    instance. This prop is required;[m
  *[m
[31m- *  - Die: The tDie instance at this board position. This prop is required;[m
[32m+[m[32m *  - Die: The Die record at this board position. This prop is required;[m
  *[m
  *  - CkSel: Set to `true` if this die is selected;[m
  *[m
[1mdiff --git a/src/UI/View.js b/src/UI/View.js[m
[1mindex e2f052d..1129a71 100644[m
[1m--- a/src/UI/View.js[m
[1m+++ b/src/UI/View.js[m
[36m@@ -14,7 +14,7 @@[m [mimport ViewAbout from "./ViewAbout";[m
 import ViewPlay from "./ViewPlay";[m
 import ViewScore from "./ViewScore";[m
 import StsApp from "../StsApp.js";[m
[31m-import { tBoard } from "../Board/Board.js";[m
[32m+[m[32mimport * as Board from "../Board/Board.js";[m
 import { tCard } from "../Round/Card.js";[m
 import { uSelStApp } from "../Store/SliceApp.js";[m
 import * as Persist from "../Persist.js";[m
[36m@@ -38,7 +38,7 @@[m [mexport default function View(aProps) {[m
 		}[m
 [m
 		case StsApp.Score: {[m
[31m-			const oBoard = tBoard.suFromPlain(Persist.uGetPlain("Board"));[m
[32m+[m			[32mconst oBoard = Board.uFromParse(Persist.uGetPlain("Board"));[m
 			const oCardOgle = tCard.suFromPlain(Persist.uGetPlain("CardOgle"));[m
 			const oCardUser = tCard.suFromPlain(Persist.uGetPlain("CardUser"));[m
 			return <ViewScore {...aProps} Board={oBoard}[m
[1mdiff --git a/src/UI/ViewPlay.js b/src/UI/ViewPlay.js[m
[1mindex 5b055c6..0a5d244 100644[m
[1m--- a/src/UI/ViewPlay.js[m
[1m+++ b/src/UI/ViewPlay.js[m
[36m@@ -12,7 +12,7 @@[m [mimport "./ViewPlay.css";[m
 import Btn from "./Btn.js";[m
 import StsApp from "../StsApp.js";[m
 import * as Setup from "../Round/Setup.js";[m
[31m-import { tBoard } from "../Board/Board.js";[m
[32m+[m[32mimport * as Board from "../Board/Board.js";[m
 import * as EntWord from "../Round/EntWord.js";[m
 import { tCard } from "../Round/Card.js";[m
 import LookBoard from "./LookBoard.js";[m
[36m@@ -25,7 +25,6 @@[m [mimport * as Persist from "../Persist.js";[m
 import * as Const from "../Const.js";[m
 [m
 import { React, useState, useEffect } from "react";[m
[31m-import PropTypes from "prop-types";[m
 import { useSelector, useDispatch } from "react-redux";[m
 [m
 // ViewPlay[m
[36m@@ -46,8 +45,8 @@[m [mexport default function ViewPlay(aProps) {[m
 	/** A Setup record that configures the current round. */[m
 	const oSetup = useSelector(uSelSetup);[m
 [m
[31m-	/** A `tBoard` instance representing the board that is being played, or `null`[m
[31m-	 *  if the board has not been generated yet. */[m
[32m+[m	[32m/** A Board record representing the board that is being played, or `null` if[m
[32m+[m	[32m *  the board has not been generated yet. */[m
 	const [oBoard, ouSet_Board] = useState(() => uBoardInit());[m
 	/** A `tCard` instance representing the Ogle scorecard, or `null` if the board[m
 	 *  has not been generated yet. */[m
[36m@@ -193,8 +192,8 @@[m [mexport default function ViewPlay(aProps) {[m
 		// already stopped when play is paused, so there is no need to do that when[m
 		// quitting play early.[m
 	}[m
[31m-	useEffect(ouMan_FeedAndStApp, [aProps, oSetup, oBoard, oStPlay, oCkVerWord,[m
[31m-		oCardUser.CtBonusTime, oTimeElap]);[m
[32m+[m	[32museEffect(ouMan_FeedAndStApp, [aProps, ouDispatch, oSetup, oBoard, oStPlay,[m
[32m+[m		[32moCkVerWord, oCardUser.CtBonusTime, oTimeElap]);[m
 [m
 	// Board generation[m
 	// ----------------[m
[36m@@ -219,11 +218,11 @@[m [mexport default function ViewPlay(aProps) {[m
 				return;[m
 			}[m
 [m
[31m-			ouSet_Board(tBoard.suFromPlain(aMsg.data.Board));[m
[32m+[m			[32mouSet_Board(Board.uFromParse(aMsg.data.Board));[m
 			ouSet_CardOgle(tCard.suFromPlain(aMsg.data.CardOgle));[m
 		};[m
 	}[m
[31m-	useEffect(ouCreate_WorkSearch, [aProps, oSetup, oBoard]);[m
[32m+[m	[32museEffect(ouCreate_WorkSearch, [aProps, ouDispatch, oSetup, oBoard]);[m
 [m
 	/** Stores the board and the associated Ogle scorecard. */[m
 	function ouStore_Board() {[m
[36m@@ -369,7 +368,7 @@[m [mexport default function ViewPlay(aProps) {[m
 [m
 		// Start new entry:[m
 		if (!oEntUser) {[m
[31m-			const oText = oBoard.uDie(aPos).Text;[m
[32m+[m			[32mconst oText = Board.uDie(oBoard, aPos).Text;[m
 			const oEntNew = EntWord.uFromPosText(aPos, oText);[m
 			ouSet_EntUser(oEntNew);[m
 			Feed.uSelDie();[m
[36m@@ -385,7 +384,7 @@[m [mexport default function ViewPlay(aProps) {[m
 		}[m
 [m
 		// Extend existing entry:[m
[31m-		const oText = oBoard.uDie(aPos).Text;[m
[32m+[m		[32mconst oText = Board.uDie(oBoard, aPos).Text;[m
 		const oEntAdd = EntWord.uFromPosText(aPos, oText, oEntUser);[m
 		ouSet_EntUser(oEntAdd);[m
 		Feed.uSelDie();[m
[36m@@ -589,7 +588,7 @@[m [mfunction uTimeRemain(aSetup, aCtBonus, aTimeElap) {[m
 }[m
 [m
 function uBoardInit() {[m
[31m-	return tBoard.suFromPlain(Persist.uGetPlain("Board"));[m
[32m+[m	[32mreturn Board.uFromParse(Persist.uGetPlain("Board"));[m
 }[m
 [m
 function uCardOgleInit() {[m
[1mdiff --git a/src/UI/ViewScore.js b/src/UI/ViewScore.js[m
[1mindex 0456d46..91eb4c2 100644[m
[1m--- a/src/UI/ViewScore.js[m
[1m+++ b/src/UI/ViewScore.js[m
[36m@@ -14,7 +14,7 @@[m [mimport DlgNamePlay from "./DlgNamePlay.js";[m
 import Btn from "./Btn.js";[m
 import StsApp from "../StsApp.js";[m
 import * as Setup from "../Round/Setup.js";[m
[31m-import { tBoard } from "../Board/Board.js";[m
[32m+[m[32mimport * as Board from "../Board/Board.js";[m
 import { tCard } from "../Round/Card.js";[m
 import { StatsWord, uScoresCoversFromCards } from "../Round/ScoreWord.js";[m
 import Feed from "../Feed.js";[m
[36m@@ -33,7 +33,7 @@[m [mimport { useSelector, useDispatch } from "react-redux";[m
 // ---------[m
 [m
 ViewScore.propTypes = {[m
[31m-	Board: PropTypes.instanceOf(tBoard).isRequired,[m
[32m+[m	[32mBoard: PropTypes.object.isRequired,[m
 	CardOgle: PropTypes.instanceOf(tCard).isRequired,[m
 	CardUser: PropTypes.instanceOf(tCard).isRequired[m
 };[m
[36m@@ -41,7 +41,7 @@[m [mViewScore.propTypes = {[m
 /** Implements the Score view, which displays the result of the last round of[m
  *  play. Along with the usual `View` props, the following props are supported:[m
  *[m
[31m- *  - `Board`: A `tBoard` instance representing the board that was played. This[m
[32m+[m[32m *  - `Board`: A Board record representing the board that was played. This[m
  *    prop is required;[m
  *[m
  *  - `CardOgle`: A `tCard` instance that gives the words scored by Ogle. This[m
